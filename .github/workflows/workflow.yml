name: Deploy to Hetzner Load Balancer Targets

on:
  push:
    branches:
      - main  # Trigger on push to main branch

jobs:
  deploy:
    runs-on: self-hosted  # Ensure this runner has network access to the private instances

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}  # Consider using an access token

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_CONTAINER_NAME }}:latest .

      - name: Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_CONTAINER_NAME }}:latest

        
      - name: Get Hetzner Servers
        run: |
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.HETZNER_API_TOKEN }}" "https://api.hetzner.cloud/v1/servers")
          SERVERS=$(echo "$RESPONSE" | jq -r --arg cname "${{ secrets.DOCKER_CONTAINER_NAME }}" '.servers[] | select(.name | contains($cname + "-")) | .private_net[0].ip' | paste -sd ' ' -)
          
          # Fail the workflow if no servers are found
          if [ -z "$SERVERS" ]; then
            echo "Error: No servers found matching the criteria." >&2
            exit 1
          fi
          
          echo "servers=$SERVERS" >> $GITHUB_ENV
          echo "Selected Servers: $SERVERS"
        
      - name: Debug Servers Variable
        run: |
          echo "Servers: $servers"
        
      - name: Add Bastion Host to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.BASTION_IP }} >> ~/.ssh/known_hosts
        
      - name: Deploy to Servers             
        if: env.servers != ''
        run: |
          # Debug to verify the servers environment variable
          echo "Servers from env.servers: $servers"
          for TARGET_IP in $servers; do
            echo "Deploying to $TARGET_IP"
            echo "Connecting to Bastion at:${{ secrets.BASTION_IP }} and then to $TARGET_IP"
            ssh -tt -J root@${{ secrets.BASTION_IP }} root@$TARGET_IP <<EOF
              echo "Connected succesfully to Bastion at:${{ secrets.BASTION_IP }} and then to $TARGET_IP"
              # Docker commands
              echo "Pulling the latest image"
              docker pull ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_CONTAINER_NAME}}:latest
              echo "Image pulled successfully"
              echo "Stopping and removing the existing container"
              docker stop ${{secrets.DOCKER_CONTAINER_NAME}} || true
              echo "Container stopped successfully"
              echo "Removing the existing container"
              docker rm ${{secrets.DOCKER_CONTAINER_NAME}} || true
              echo "Container removed successfully"
              echo "Starting the new container"
              docker run -d -p 80:80 --name ${{secrets.DOCKER_CONTAINER_NAME}} ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_CONTAINER_NAME}}:latest
              echo "Container started successfully"
              exit
          EOF
          done
          echo "All deployments completed successfully!"
